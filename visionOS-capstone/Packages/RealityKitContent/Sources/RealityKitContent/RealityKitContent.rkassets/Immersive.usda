#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["big_bumpy_pumpkin", "big_orange_pumpkin", "black_pumpkin", "orange_pumpkin_with_stem", "small_white_pumpkin", "colorful_gourd", "blue_wonky_pumpkin", "pedestal_1"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def "big_bumpy_pumpkin" (
        active = true
        references = @big-bumpy-pumpkin.usdz@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.3, 1.3, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "big_orange_pumpkin" (
        active = true
        references = @big-orange-pumpkin.usdz@
    )
    {
        reorder nameChildren = ["Materials", "Geometry"]
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.3, 1.3, -3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "black_pumpkin" (
        active = true
        references = @black-pumpkin.usdz@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.3, 1.3, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "orange_pumpkin_with_stem" (
        active = true
        references = @orange-pumpkin-with-stem.usdz@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.3, 1.3, -2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Geometry"
        {
            over "Mesh"
            {
            }
        }
    }

    def "small_white_pumpkin" (
        active = true
        references = @small-white-pumpkin.usdz@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.3, 1.3, -2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "colorful_gourd" (
        active = true
        references = @colorful-gourd.usdz@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.3, 1.3, -3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "blue_wonky_pumpkin" (
        active = true
        references = @blue-wonky-pumpkin.usdz@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 1.3, -3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cylinder "pedestal_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["GlossyBlackWoodPlank", "DefaultMaterial"]
        uniform token axis = "Y"
        double height = 1.2
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.3, 0.6, -2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/pedestal_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "pedestal_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 1.2
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.3, 0.6, -3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/pedestal_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "pedestal_3" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 1.2
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.3, 0.6, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/pedestal_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "pedestal_4" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 1.2
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.3, 0.6, -2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/pedestal_4/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "pedestal_5" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 1.2
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.3, 0.6, -3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/pedestal_5/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "pedestal_6" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 1.2
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (1.3, 0.6, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/pedestal_6/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "pedestal_7" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 1.2
        rel material:binding = </Root/MaplePlywood> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.6, -3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/pedestal_7/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def "GlossyBlackWoodPlank" (
        active = true
        prepend references = @GlossyBlackWoodPlank.usdz@
    )
    {
        color3f inputs:Basecolor_Tint (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-56.812614, 67.17455)
                    float2 sizeInSubgraph = (160.5, 53)
                    int stackingOrderInSubgraph = 2329
                }
            }
        )
        float2 inputs:UV_Scale (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-725.2588, 351.55255)
                    float2 sizeInSubgraph = (138.5, 53)
                    int stackingOrderInSubgraph = 2272
                }
            }
        )
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        over "Dot"
        {
            float2 ui:nodegraph:node:size = (44, 18)
        }

        over "multiply"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "add"
        {
            float2 ui:nodegraph:node:size = (61.5, 36.5)
        }

        over "PreviewSurface"
        {
            float2 ui:nodegraph:node:size = (148.5, 199)
        }

        over "Mix"
        {
            float2 ui:nodegraph:node:size = (109, 145)
        }

        over "Swizzle"
        {
            float2 ui:nodegraph:node:size = (133.5, 40)
        }

        over "Swizzle_1"
        {
            float2 ui:nodegraph:node:size = (145.5, 53)
        }

        over "Multiply_1"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "BaseColor"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Roughness"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Metallic"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Normal"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }
    }

    def "MaplePlywood" (
        active = true
        prepend references = @MaplePlywood.usdz@
    )
    {
        color3f inputs:Basecolor_Tint (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-56.812614, 67.17455)
                    float2 sizeInSubgraph = (160.5, 53)
                    int stackingOrderInSubgraph = 2328
                }
            }
        )
        float2 inputs:UV_Scale (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-725.2588, 351.55255)
                    float2 sizeInSubgraph = (138.5, 53)
                    int stackingOrderInSubgraph = 2272
                }
            }
        )
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        over "Dot"
        {
            float2 ui:nodegraph:node:size = (44, 18)
        }

        over "multiply"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "add"
        {
            float2 ui:nodegraph:node:size = (61.5, 36.5)
        }

        over "PreviewSurface"
        {
            float2 ui:nodegraph:node:size = (148.5, 199)
        }

        over "Mix"
        {
            float2 ui:nodegraph:node:size = (109, 145)
        }

        over "Swizzle"
        {
            float2 ui:nodegraph:node:size = (133.5, 40)
        }

        over "Swizzle_1"
        {
            float2 ui:nodegraph:node:size = (145.5, 53)
        }

        over "Multiply_1"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "BaseColor"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Roughness"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Metallic"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Normal"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }
    }
}

